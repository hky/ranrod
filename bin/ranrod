#! /usr/bin/env python
#                         _______
#   ____________ _______ _\__   /_________       ___  _____
#  |    _   _   \   _   |   ____\   _    /      |   |/  _  \
#  |    /   /   /   /   |  |     |  /___/   _   |   |   /  /
#  |___/___/   /___/____|________|___   |  |_|  |___|_____/
#          \__/                     |___|
#

__author__    = 'Wijnand Modderman-Lenstra'
__email__     = 'maze@pyth0n.org'
__copyright__ = 'Copyright 2011, maze.io labs'
__license__   = 'MIT'


import glob
import os
from ranrod.config import Config
from ranrod.device import Device
from ranrod.repository import Repository


def run():
    import optparse

    parser = optparse.OptionParser()
    parser.add_option('-c', '--config', dest='config',
        default='etc/ranrod.cfg',
        help='location of the main configuration file')

    options, args = parser.parse_args()

    # Parse main configuration
    config = Config(options.config)

    # Parse devices configuration
    device_files = []
    device_paths = config.get('devices', 'load')
    if type(device_paths) != list:
        device_paths = [device_paths]
    for path in device_paths:
        if not path.startswith('/'):
            path = os.path.join(os.path.dirname(options.config), path)
        for filename in glob.glob(path):
            device_files.append(filename)

    if not device_files:
        print 'No device configurations found'
        return 1

    # Setup repository
    repository_section = config.get_section('repository')
    if not repository_section.get('path').startswith('/'):
        repository_section['path'] = os.path.join(os.path.dirname(options.config),
            repository_section['path'])
    repository = Repository(**repository_section)

    # Setup devices
    devices = []
    for filename in device_files:
        devices_config = Config(filename)
        for section in devices_config.get_sections():
            devices.append(Device(devices_config.get_section(section),
                section,
                repository))

    print devices
    for device in devices:
        print device
        model = os.path.join(config.get('devices', 'models'), device.config.model + '.rr')
        if not model.startswith('/'):
            model = os.path.join(os.path.dirname(options.config), model)
        device.config.address = (device.config.hostname, 23)
        device.parse(model)
        try:
            device.remote.close()
        except:
            pass

    return 0


if __name__ == '__main__':
    import sys
    sys.exit(run())

